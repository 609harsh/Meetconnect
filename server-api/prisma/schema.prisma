// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  password    String?   
  phoneNumber String?  
  createdAt   DateTime @default(now())
  about       String?
  username    String   @unique
  profileImg  String?
  interview   Interview[]
  trackerColumn TrackerColumn[]
  skill       UserSkills?
  workExperience UserWorkExperience[]
  address     UserAddress?
  education   UserEducation[]
}

model TrackerColumn{
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  columnTitle       String
  idx               Int
  username          String
  jobs              TrackerJob[]
  user              User @relation(fields: [username], references: [username], onDelete:Cascade)
}

model TrackerJob{
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  jobtitle String
  company  String
  note     String?
  idx      Int
  columnId   String?  @db.ObjectId
  column     TrackerColumn? @relation(fields: [columnId],references: [id], onDelete:Cascade)
  link     String?
}

model UserAddress{
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  username    String   @unique
  user          User?    @relation(fields: [username],references: [username])
  line1       String? 
  line2       String?
  state       String?
  country     String?
  city        String?
  pincode     String?
}

model UserEducation{
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  username      String   @unique
  user          User?    @relation(fields: [username],references: [username])
  school        String?
  degree        String?
  fieldOfStudy  String?
  duration      String?
  grade         String?
}

model UserWorkExperience{
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  username      String
  user          User?    @relation(fields: [username],references: [username])
  title         String?
  company       String?
  duration      String?
  about         String?
}

model UserSkills{
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  username      String  @unique
  user          User?    @relation(fields: [username],references: [username])
  skills        Skills[]
}
model Resources {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  label     String
  easy      EasyQuestion[] 
  medium    MediumQuestion[] 
  hard      HardQuestion[] 
}

model EasyQuestion{
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  question        String
  solution        String
  resource        Resources? @relation(fields: [resoucesId], references: [id],onDelete:Cascade)
  resoucesId      String?  @db.ObjectId
}

model MediumQuestion{
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  solution      String
  resource      Resources? @relation(fields: [resoucesId], references: [id],onDelete:Cascade)
  resoucesId    String?  @db.ObjectId
}
model HardQuestion{
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  solution      String
  resource      Resources? @relation(fields: [resoucesId], references: [id],onDelete:Cascade)
  resoucesId    String?  @db.ObjectId
}

model Interview{
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  userId        String @db.ObjectId
  user          User   @relation(fields: [userId], references: [id],onDelete:Cascade)
  title         String
  type          String
  company       String
  date          String
  duration      String?
  guest         String?
  notification  String?
  createdAt     DateTime @default(now())
  link          String?
}

type Skills{
  value String
  label String
}